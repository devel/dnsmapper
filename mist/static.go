// Code generated by "esc -o static.go -ignore .DS_Store public"; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/public/index.html": {
		name:    "index.html",
		local:   "public/index.html",
		size:    4703,
		modtime: 1593468989,
		compressed: `
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
`,
	},

	"/public/js/templates.js": {
		name:    "templates.js",
		local:   "public/js/templates.js",
		size:    1372,
		modtime: 1386147544,
		compressed: `
H4sIAAAAAAAC/6yUwW+bMBTGz+tf8eKTrXmULNOiFYhUpZW6C5rKbmMHB0xjiRlkv2SaqP/3yTCyamtp
q+QCPL2P33t8n7CqgM5mM5Q/2lqgtAz2wsChhAQ6F50d6m9EtZZ8hwS0/Ak3zZ3Qwdc/TdoVTSkvoNrp
AlWjgRa85YpBNzAT3CobYbChKlH394SwviAxik0toaiFtUlOhqq/vrNoVCvLnKxGca4JvAV1eNU80XkT
43Z1lWaQSbOXJj7H7ZRy3ew0ml/PyW7lnWr0hOAyS59jXF+l2UnXmVDF548ZpCqKgaUYVLSPk/uc5qy/
hXy+DPmH8CMnXQfOEcY6DIztsxyT7Qv0jckMYizHDgb7Yd4Qx+cvw9CQsb+blq/GrNcnwdyeBnOZpS/j
PPT/RtjrUv+bwfvlki8Wn16Rwf9LeWwq8chP85SjbfaQl5rsWFQEbdNSFjlV0dmkU3Me8pCTwaBhOBRN
bVuhk5wscrJ6YsjU7/Fwg1HmTyOvNBJ3RgMGVU1ZBI63wqAStb2AznGwu41/AnCORWe/AwAA//8GMQT5
XAUAAA==
`,
	},

	"/public/js/widget.js": {
		name:    "widget.js",
		local:   "public/js/widget.js",
		size:    70,
		modtime: 1386487443,
		compressed: `
H4sIAAAAAAAC/0orzUsuyczP09BUqOZSUFBQ0MhLLVfwzE1MT9XQ1NQrLkq2VdLXLy8v18tNLChILdLL
KykoyM/P0csvStfPy89LVbLmquUCBAAA//+EFQN+RgAAAA==
`,
	},

	"/public": {
		name:  "public",
		local: `public`,
		isDir: true,
	},

	"/public/js": {
		name:  "js",
		local: `public/js`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"public": {
		_escData["/public/index.html"],
		_escData["/public/js"],
	},

	"public/js": {
		_escData["/public/js/templates.js"],
		_escData["/public/js/widget.js"],
	},
}
